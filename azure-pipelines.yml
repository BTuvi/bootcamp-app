trigger:
  - master
  # - feature/*
  
resources:
  - repo: self
  
variables:
    # Container registry service connection established during pipeline creation
    dockerRegistryServiceConnection: '9a4a191b-cd5d-416c-ac00-469843e54767'
    imageRepository: 'bootcamp-app'
    containerRegistry: 'bootcampappcontainer.azurecr.io'
    dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
    tag: '$(Build.BuildId)'
  
    # Agent VM image name
    vmImageName: 'ubuntu-latest'
  
stages:
  - stage: CI
    displayName: Build and push 
    jobs:
    - job: Build
      displayName: Build
      pool:
        name: bootcamp-app-pool
        vmImage: $(vmImageName)
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          containerRegistry: $(dockerRegistryServiceConnection)
          command: buildAndPush
          repository: $(imageRepository)
          Dockerfile: $(dockerfilePath)
          tags: |
            $(tag)

      # CD staging
  - stage: DeployToStaging
    displayName: Deploy to Staging 
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
    - deployment: staging
      displayName: Deploy to Staging
      environment:
        name: staging
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - task: CmdLine@2
              displayName: Stop Current Container
              inputs:
                script: 'docker rm -f  bootcamp-app || true'
            - task: Docker@2
              displayName: 'Login to Registry'
              inputs:
                containerRegistry: $(dockerRegistryServiceConnection)
                command: 'login'
            - task: CmdLine@2
              displayName: Pull image
              inputs:
                script: 'docker pull $(containerRegistry)/$(imageRepository):$(tag)'
            - task: Bash@3
              displayName:  Run Container
              inputs:
                targetType: 'inline'
                script: 'docker run -d --restart=always --name bootcamp-app -p 8080:8080 -e PGHOST=$(PG_HOST) -e PORT=$(PORT) -e HOST=$(HOST) -e PGUSERNAME=$(PG_USERNAME) -e PGDATABASE=postgres -e PGPASSWORD=$(PG_PASSWORD) -e PGPORT=$(PG_PORT) -e HOST_URL=$(HOST_URL) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=development -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistry)/$(imageRepository):$(tag)'
 
                      # CD Production
  - stage: DeployToProduction
    displayName: Deploy to Production
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
    - deployment: production
      displayName: Deploy to Production
      environment:
        name: production
        resourceType: VirtualMachine
      strategy:
       runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            displayName: Stop Current Container
            inputs:
              script: 'docker rm -f  bootcamp-app || true'
          - task: Docker@2
            displayName: 'Login to Registry'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'
          - task: CmdLine@2
            displayName: Pull image
            inputs:
              script: 'docker pull $(containerRegistry)/$(imageRepository):$(tag)'
          - task: Bash@3
            displayName:  Run Container
            inputs:
              targetType: 'inline'
              script: 'docker run -d --restart=always --name bootcamp-app -p 8080:8080 -e PGHOST=$(PG_HOST) -e PORT=$(PORT) -e HOST=$(HOST) -e PGUSERNAME=$(PG_USERNAME) -e PGDATABASE=postgres -e PGPASSWORD=$(PG_PASSWORD) -e PGPORT=$(PG_PORT) -e HOST_URL=$(HOST_URL_PRODUCTION) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=development -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistry)/$(imageRepository):$(tag)'
           

      